plugins {
    id "groovy"
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.12.0'
    id 'java-gradle-plugin'
    id 'org.jetbrains.kotlin.jvm'  version '1.3.72'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'http://developer.marklogic.com/maven2' }
}

dependencies {
    compileOnly gradleApi()
    implementation project(':marklogic-client-api')
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version:'4.7.2'
    implementation ('org.jetbrains.kotlin:kotlin-stdlib:1.3.72')
    implementation ('com.fasterxml.jackson.module:jackson-module-kotlin:2.12.4')
    implementation ('com.networknt:json-schema-validator:1.0.42')
    testCompileOnly gradleTestKit()
}

task mlDevelopmentToolsJar(type: Jar, dependsOn: classes) {
    archivesBaseName = 'ml-development-tools'
}

gradlePlugin {
    plugins {
        mlDevelopmentToolsPlugin {
            id = 'com.marklogic.ml-development-tools'
            implementationClass = 'com.marklogic.client.tools.gradle.ToolsPlugin'
            displayName = 'ml-development-tools MarkLogic Data Service Tools'
            description = 'ml-development-tools plugin for developing data services on MarkLogic'
            version = project.version
        }
    }
}

publishing {
    publications {
        main(MavenPublication) {
            from components.java
        }
    }
}

pluginBundle {
    website = 'https://github.com/marklogic/java-client-api'
    vcsUrl = 'git@github.com:marklogic/java-client-api.git'
    plugins {
        mlDevelopmentToolsPlugin {
            id = 'com.marklogic.ml-development-tools'
            displayName = 'ml-development-tools MarkLogic Data Service Tools'
            description = 'ml-development-tools plugin for developing data services on MarkLogic'
            tags = ['marklogic', 'development tools', 'data services']
            version = project.version
        }
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}
compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

task setupTestServer(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    main = 'com.marklogic.client.test.dbfunction.FntestconfKt'
    args = [ 'setup' ]
}
task generateTests(type: JavaExec) {
    dependsOn setupTestServer
    classpath = sourceSets.test.runtimeClasspath
    main = 'com.marklogic.client.test.dbfunction.FntestgenKt'
    args = [ './src/test/', 'latest' ]
}
task teardownTestServer(type: JavaExec) {
    dependsOn test
    classpath = sourceSets.test.runtimeClasspath
    main = 'com.marklogic.client.test.dbfunction.FntestconfKt'
    args = [ 'teardown' ]
}
