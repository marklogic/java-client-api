// Copyright (c) 2022 MarkLogic Corporation

plugins {
    id "groovy"
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '1.0.0'
    id 'java-gradle-plugin'
    id 'org.jetbrains.kotlin.jvm'  version '1.6.20'
}

dependencies {
    compileOnly gradleApi()
    implementation project(':marklogic-client-api')
    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.6.20'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.14.1'
    implementation 'com.networknt:json-schema-validator:1.0.76'

	// Not yet migrating this project to JUnit 5. Will reconsider it once we have a reason to enhance
	// this project.
	testImplementation 'junit:junit:4.13.2'
	testImplementation 'xmlunit:xmlunit:1.6'
	testCompileOnly gradleTestKit()
	testImplementation 'com.squareup.okhttp3:okhttp:4.10.0'
}

// Added to avoid problem where processResources fails because - somehow - the plugin properties file is getting
// copied twice. This started occurring with the upgrade of Gradle from 6.x to 7.x.
tasks.processResources {
    duplicatesStrategy = "exclude"
}

task mlDevelopmentToolsJar(type: Jar, dependsOn: classes) {
    archivesBaseName = 'ml-development-tools'
}

pluginBundle {
    website = 'https://github.com/marklogic/java-client-api'
    vcsUrl = 'https://github.com/marklogic/java-client-api.git'
    tags = ['marklogic']
}
gradlePlugin {
    plugins {
        mlDevelopmentToolsPlugin {
            id = 'com.marklogic.ml-development-tools'
            implementationClass = 'com.marklogic.client.tools.gradle.ToolsPlugin'
            displayName = 'ml-development-tools MarkLogic Data Service Tools'
            description = 'ml-development-tools plugin for developing data services on MarkLogic'
        }
    }
}

publishing {
    publications {
        main(MavenPublication) {
            from components.java
        }
    }
	 repositories {
		maven {
			if(project.hasProperty("mavenUser")) {
				credentials {
					username mavenUser
					password mavenPassword
				}
			}
			url publishUrl
		}
	}
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}
compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

task setupTestServer(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    main = 'com.marklogic.client.test.dbfunction.FntestconfKt'
    args = [ 'setup' ]
}
task generateTests(type: JavaExec) {
    dependsOn setupTestServer
    classpath = sourceSets.test.runtimeClasspath
    main = 'com.marklogic.client.test.dbfunction.FntestgenKt'
    args = [ './src/test/', 'latest' ]
}
task teardownTestServer(type: JavaExec) {
    dependsOn test
    classpath = sourceSets.test.runtimeClasspath
    main = 'com.marklogic.client.test.dbfunction.FntestconfKt'
    args = [ 'teardown' ]
}
