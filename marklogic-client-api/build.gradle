// Copyright (c) 2022 MarkLogic Corporation

plugins {
    id 'maven-publish'
    id 'distribution'
}

group = 'com.marklogic'

description = "The official MarkLogic Java client API."

dependencies {
	if (JavaVersion.current().isJava9Compatible()) {
		implementation 'javax.xml.bind:jaxb-api:2.3.1'
		implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.8'
		implementation 'org.glassfish.jaxb:jaxb-core:2.3.0.1'
	}
	implementation 'com.squareup.okhttp3:okhttp:4.11.0'
	implementation 'com.squareup.okhttp3:logging-interceptor:4.11.0'
	implementation 'io.github.rburgst:okhttp-digest:2.7'
	implementation 'com.sun.mail:javax.mail:1.6.2'
	implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
	implementation 'org.slf4j:slf4j-api:1.7.36'
	implementation 'com.fasterxml.jackson.core:jackson-core:2.15.0'
	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.0'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.0'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.15.0'

	// Only used by extras (which some examples then depend on)
	// Forcing codec version to avoid vulnerability with older version in httpclient
	compileOnly 'commons-codec:commons-codec:1.15'
	compileOnly 'org.apache.httpcomponents:httpclient:4.5.14'
	compileOnly 'org.jdom:jdom2:2.0.6.1'
	compileOnly 'org.dom4j:dom4j:2.1.3'
	compileOnly 'com.google.code.gson:gson:2.10'

	testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
	// Forcing junit version to avoid vulnerability with older version in xmlunit
	testImplementation 'junit:junit:4.13.1'
	testImplementation 'org.xmlunit:xmlunit-legacy:2.9.1'
	testImplementation project(':examples')

	// Allows talking to the Manage API. It depends on the Java Client itself, which will usually be a slightly older
	// version, but that should not have any impact on the tests.
	testImplementation "com.marklogic:ml-app-deployer:4.5.2"

	// Starting with mockito 5.x, Java 11 is required, so sticking with 4.x as we have to support Java 8.
	testImplementation "org.mockito:mockito-core:4.11.0"
	testImplementation "org.mockito:mockito-inline:4.11.0"
	testImplementation "com.squareup.okhttp3:mockwebserver:4.11.0"

	testImplementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.15.0'
	testImplementation 'ch.qos.logback:logback-classic:1.3.5'
// schema validation issue with testImplementation 'xerces:xercesImpl:2.12.0'
	testImplementation 'org.opengis.cite.xerces:xercesImpl-xsd11:2.12-beta-r1667115'
	testImplementation 'org.apache.commons:commons-lang3:3.12.0'
	testImplementation 'org.apache.httpcomponents:httpclient:4.5.14'
	testImplementation 'com.opencsv:opencsv:4.6'
	testImplementation 'org.geonames:geonames:1.0'
	testImplementation 'org.skyscreamer:jsonassert:1.5.0'
}

// Ensure that mlHost and mlPassword can override the defaults of localhost/admin if they've been modified
test {
	useJUnitPlatform()
	systemProperty "TEST_HOST", mlHost
	systemProperty "TEST_ADMIN_PASSWORD", mlPassword
	// Needed by the tests for the example programs
	systemProperty "EXAMPLE_HOST", mlHost
	systemProperty "EXAMPLE_ADMIN_PASSWORD", mlPassword
	systemProperty "TEST_USE_REVERSE_PROXY_SERVER", testUseReverseProxyServer
}

jar {
    exclude (
            'search.xsd', 'search-bindings.xjb',
            '*.txt', 'property.xsd',
            'restapi-bindings.xjb', 'security.xsd'
    )
}
task sourcesJar(type: Jar) {
    classifier = 'sources'
    exclude ('property', '*.xsd', '*.xjb')
    from sourceSets.main.allSource
}

javadoc {
    maxMemory="6000m"
    options.overview = "src/main/javadoc/overview.html"
    options.windowTitle = "$rootProject.describedName $rootProject.version"
    options.docTitle = "$rootProject.describedName $rootProject.version"
    options.bottom = "Copyright &copy; 2022 MarkLogic Corporation"
    options.links = [ 'http://docs.oracle.com/javase/8/docs/api/' ]
    options.use = true
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html4', true)
    }
    exclude([
            '**/impl/**', '**/jaxb/**', '**/test/**'
    ])
// workaround for bug in options.docFilesSubDirs = true
    doLast{
        copy{
            from "${projectDir}/src/main/javadoc/doc-files"
            into "${buildDir}/docs/javadoc/doc-files"
        }
    }
}

task javadocJar (type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

Node pomCustomizations = new NodeBuilder(). project {
    name "$rootProject.describedName"
    packaging 'jar'
    textdescription "$project.description"
    url 'https://github.com/marklogic/java-client-api'

    scm {
        url 'git@github.com:marklogic/java-client-api.git'
        connection 'scm:git:git@github.com:marklogic/java-client-api.git'
        developerConnection 'scm:git:git@github.com:marklogic/java-client-api.git'
    }

    licenses {
        license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }

    developers {
        developer {
            name 'MarkLogic'
            email 'java-sig@marklogic.com'
            organization 'MarkLogic'
            organizationUrl 'https://www.marklogic.com'
        }
        developer {
            name 'MarkLogic Github Contributors'
            email 'general@developer.marklogic.com'
            organization 'Github Contributors'
            organizationUrl 'https://github.com/marklogic/java-client-api/graphs/contributors'
        }
    }
}

publishing {
    publications {
        mainJava(MavenPublication) {
            from components.java

            pom.withXml {
                asNode().append(pomCustomizations.packaging)
                asNode().append(pomCustomizations.name)
                asNode().appendNode("description", pomCustomizations.textdescription.text())
                asNode().append(pomCustomizations.url)
                asNode().append(pomCustomizations.licenses)
                asNode().append(pomCustomizations.developers)
                asNode().append(pomCustomizations.scm)
            }
            artifact sourcesJar
            artifact javadocJar
        }
    }
    repositories {
        maven {
            if(project.hasProperty("mavenUser")) {
                credentials {
                    username mavenUser
                    password mavenPassword
                }
            }
            url publishUrl
        }
    }
}

distZip {
    archiveFileName = "$project.name-$rootProject.version-with-dependencies.zip"
    dependsOn javadoc
}

distributions {
    main {
        contents {
            from("..") {
                include("NOTICE.TXT")
            }
            from("src/main/resources") {
                include ("Readme.txt")
                include ("LICENSE.txt")
            }
            into ("example") {
                from ("../examples/src/main/resources") {
                    include ("data/**")
                    include ("scripts/**")
                    include ("Example.properties")
                }
                from ("../examples/src/main/resources/example") {
                    include ("README.txt")
                }
                from ("../examples/src/main/java/") {
                    include ("com/marklogic/client/example/cookbook/*.java")
                    include ("com/marklogic/client/example/handle/*.java")
                    include ("com/marklogic/client/example/extension/*.java")
                }
            }
            into ("doc/api") {
                from ("build/docs/javadoc")
            }
            into("lib") {
                from jar
                from(project.configurations.runtimeClasspath)
            }
        }
    }
}

task printClassPath() {
    doLast {
        println sourceSets.main.runtimeClasspath.asPath+':'+sourceSets.test.runtimeClasspath.asPath
    }
}

task generatePomForDependencyGraph(dependsOn: "generatePomFileForMainJavaPublication") {
    description = "Prepare for a release by making a copy of the generated pom file in the root directory so that it " +
            "can enable Github's Dependency Graph feature, which does not yet support Gradle"
    doLast {
        def preamble = '<?xml version="1.0" encoding="UTF-8"?>'
        def comment = "<!--\n" +
                "This file was generated via Gradle and is being used primarily for github's Dependency Graph feature.\n" +
                "It is not intended to be used to build this project.\n" +
                "-->"
        def fileText = file("build/publications/mainJava/pom-default.xml").getText()
        file("../pom.xml").setText(fileText.replace(preamble, preamble + comment))
    }
}

task testRows(type: Test) {
	useJUnitPlatform()
	description = "Run all 'rows' tests; i.e. those exercising Optic and Optic Update functionality"
	include "com/marklogic/client/test/rows/**"
}

task debugCloudAuth(type: JavaExec) {
	description = "Test program for manual testing of cloud-based authentication against a MarkLogic Cloud instance"
	main = 'com.marklogic.client.test.MarkLogicCloudAuthenticationDebugger'
	classpath = sourceSets.test.runtimeClasspath
	args = [cloudHost, cloudKey, cloudBasePath]
}
